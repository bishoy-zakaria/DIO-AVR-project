
DIO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001da  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000022e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000022e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000260  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  0000029c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000094d  00000000  00000000  000002d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005a6  00000000  00000000  00000c21  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003ba  00000000  00000000  000011c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00001584  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000353  00000000  00000000  000015d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000405  00000000  00000000  0000192b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001d30  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 5a 00 	call	0xb4	; 0xb4 <main>
  64:	0c 94 eb 00 	jmp	0x1d6	; 0x1d6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <putton1_value>:
	}
}
Uint8 putton1_value(void)
{
	Uint8 putton=0;
	putton=Get_Bit(PINB,0);
  6c:	86 b3       	in	r24, 0x16	; 22
  6e:	81 70       	andi	r24, 0x01	; 1
	while(Get_Bit(PINB,0));
  70:	b0 99       	sbic	0x16, 0	; 22
  72:	fe cf       	rjmp	.-4      	; 0x70 <putton1_value+0x4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  74:	e3 e2       	ldi	r30, 0x23	; 35
  76:	f4 ef       	ldi	r31, 0xF4	; 244
  78:	31 97       	sbiw	r30, 0x01	; 1
  7a:	f1 f7       	brne	.-4      	; 0x78 <putton1_value+0xc>
  7c:	00 c0       	rjmp	.+0      	; 0x7e <putton1_value+0x12>
  7e:	00 00       	nop
	_delay_ms(250);
	return putton;
}
  80:	08 95       	ret

00000082 <putton2_value>:
Uint8 putton2_value(void)
{
	Uint8 putton=0;
	putton=Get_Bit(PINB,4);
  82:	86 b3       	in	r24, 0x16	; 22
  84:	82 95       	swap	r24
  86:	81 70       	andi	r24, 0x01	; 1
	while(Get_Bit(PINB,4));
  88:	b4 99       	sbic	0x16, 4	; 22
  8a:	fe cf       	rjmp	.-4      	; 0x88 <putton2_value+0x6>
  8c:	e3 e2       	ldi	r30, 0x23	; 35
  8e:	f4 ef       	ldi	r31, 0xF4	; 244
  90:	31 97       	sbiw	r30, 0x01	; 1
  92:	f1 f7       	brne	.-4      	; 0x90 <putton2_value+0xe>
  94:	00 c0       	rjmp	.+0      	; 0x96 <putton2_value+0x14>
  96:	00 00       	nop
	_delay_ms(250);
	return putton;
}
  98:	08 95       	ret

0000009a <putton3_value>:
Uint8 putton3_value(void)
{
	Uint8 putton=0;
	putton=Get_Bit(PIND,2);
  9a:	80 b3       	in	r24, 0x10	; 16
  9c:	82 fb       	bst	r24, 2
  9e:	88 27       	eor	r24, r24
  a0:	80 f9       	bld	r24, 0
	while(Get_Bit(PIND,2));
  a2:	82 99       	sbic	0x10, 2	; 16
  a4:	fe cf       	rjmp	.-4      	; 0xa2 <putton3_value+0x8>
  a6:	e3 e2       	ldi	r30, 0x23	; 35
  a8:	f4 ef       	ldi	r31, 0xF4	; 244
  aa:	31 97       	sbiw	r30, 0x01	; 1
  ac:	f1 f7       	brne	.-4      	; 0xaa <putton3_value+0x10>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <putton3_value+0x16>
  b0:	00 00       	nop
	_delay_ms(250);
	return putton;
}
  b2:	08 95       	ret

000000b4 <main>:
Uint8 putton2_value(void);
Uint8 putton3_value(void);
int main(void)
{
	
	DDRC =0x04;
  b4:	84 e0       	ldi	r24, 0x04	; 4
  b6:	84 bb       	out	0x14, r24	; 20
	PORTC=0x04;
  b8:	85 bb       	out	0x15, r24	; 21
	DDRC =0b10000100;
  ba:	84 e8       	ldi	r24, 0x84	; 132
  bc:	84 bb       	out	0x14, r24	; 20
	PORTC=0b10000100;
  be:	85 bb       	out	0x15, r24	; 21
	DDRD =0b00001000;
  c0:	88 e0       	ldi	r24, 0x08	; 8
  c2:	81 bb       	out	0x11, r24	; 17
	PORTD=0x08;
  c4:	82 bb       	out	0x12, r24	; 18
	/* **********BUTTON************** */
	DDRB=0x00;
  c6:	17 ba       	out	0x17, r1	; 23
	while(1)
	{
		if(putton1_value())
		{
		_delay_ms(5000);
		Toggle_Bit(PORTC,2);
  c8:	d4 e0       	ldi	r29, 0x04	; 4
		_delay_ms(5100);
		Toggle_Bit(PORTC,7);
		_delay_ms(5200);
		Toggle_Bit(PORTD,3);
  ca:	c8 e0       	ldi	r28, 0x08	; 8
	PORTD=0x08;
	/* **********BUTTON************** */
	DDRB=0x00;
	while(1)
	{
		if(putton1_value())
  cc:	0e 94 36 00 	call	0x6c	; 0x6c <putton1_value>
  d0:	88 23       	and	r24, r24
  d2:	69 f1       	breq	.+90     	; 0x12e <main+0x7a>
  d4:	2f e3       	ldi	r18, 0x3F	; 63
  d6:	82 e4       	ldi	r24, 0x42	; 66
  d8:	9f e0       	ldi	r25, 0x0F	; 15
  da:	21 50       	subi	r18, 0x01	; 1
  dc:	80 40       	sbci	r24, 0x00	; 0
  de:	90 40       	sbci	r25, 0x00	; 0
  e0:	e1 f7       	brne	.-8      	; 0xda <main+0x26>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <main+0x30>
  e4:	00 00       	nop
		{
		_delay_ms(5000);
		Toggle_Bit(PORTC,2);
  e6:	85 b3       	in	r24, 0x15	; 21
  e8:	8d 27       	eor	r24, r29
  ea:	85 bb       	out	0x15, r24	; 21
  ec:	2f e5       	ldi	r18, 0x5F	; 95
  ee:	80 e9       	ldi	r24, 0x90	; 144
  f0:	9f e0       	ldi	r25, 0x0F	; 15
  f2:	21 50       	subi	r18, 0x01	; 1
  f4:	80 40       	sbci	r24, 0x00	; 0
  f6:	90 40       	sbci	r25, 0x00	; 0
  f8:	e1 f7       	brne	.-8      	; 0xf2 <main+0x3e>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <main+0x48>
  fc:	00 00       	nop
		_delay_ms(5100);
		Toggle_Bit(PORTC,7);
  fe:	85 b3       	in	r24, 0x15	; 21
 100:	80 58       	subi	r24, 0x80	; 128
 102:	85 bb       	out	0x15, r24	; 21
 104:	2f e7       	ldi	r18, 0x7F	; 127
 106:	8e ed       	ldi	r24, 0xDE	; 222
 108:	9f e0       	ldi	r25, 0x0F	; 15
 10a:	21 50       	subi	r18, 0x01	; 1
 10c:	80 40       	sbci	r24, 0x00	; 0
 10e:	90 40       	sbci	r25, 0x00	; 0
 110:	e1 f7       	brne	.-8      	; 0x10a <main+0x56>
 112:	00 c0       	rjmp	.+0      	; 0x114 <main+0x60>
 114:	00 00       	nop
		_delay_ms(5200);
		Toggle_Bit(PORTD,3);
 116:	82 b3       	in	r24, 0x12	; 18
 118:	8c 27       	eor	r24, r28
 11a:	82 bb       	out	0x12, r24	; 18
 11c:	2f e1       	ldi	r18, 0x1F	; 31
 11e:	81 ea       	ldi	r24, 0xA1	; 161
 120:	97 e0       	ldi	r25, 0x07	; 7
 122:	21 50       	subi	r18, 0x01	; 1
 124:	80 40       	sbci	r24, 0x00	; 0
 126:	90 40       	sbci	r25, 0x00	; 0
 128:	e1 f7       	brne	.-8      	; 0x122 <main+0x6e>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <main+0x78>
 12c:	00 00       	nop
		_delay_ms(2500);
		}
		/***********************/
		if(putton2_value())
 12e:	0e 94 41 00 	call	0x82	; 0x82 <putton2_value>
 132:	88 23       	and	r24, r24
 134:	21 f1       	breq	.+72     	; 0x17e <main+0xca>
		{
		Toggle_Bit(PORTD,3);
 136:	82 b3       	in	r24, 0x12	; 18
 138:	8c 27       	eor	r24, r28
 13a:	82 bb       	out	0x12, r24	; 18
 13c:	2f e5       	ldi	r18, 0x5F	; 95
 13e:	80 e9       	ldi	r24, 0x90	; 144
 140:	9f e0       	ldi	r25, 0x0F	; 15
 142:	21 50       	subi	r18, 0x01	; 1
 144:	80 40       	sbci	r24, 0x00	; 0
 146:	90 40       	sbci	r25, 0x00	; 0
 148:	e1 f7       	brne	.-8      	; 0x142 <main+0x8e>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <main+0x98>
 14c:	00 00       	nop
		_delay_ms(5100);
		Toggle_Bit(PORTC,7);
 14e:	85 b3       	in	r24, 0x15	; 21
 150:	80 58       	subi	r24, 0x80	; 128
 152:	85 bb       	out	0x15, r24	; 21
 154:	2f e7       	ldi	r18, 0x7F	; 127
 156:	8e ed       	ldi	r24, 0xDE	; 222
 158:	9f e0       	ldi	r25, 0x0F	; 15
 15a:	21 50       	subi	r18, 0x01	; 1
 15c:	80 40       	sbci	r24, 0x00	; 0
 15e:	90 40       	sbci	r25, 0x00	; 0
 160:	e1 f7       	brne	.-8      	; 0x15a <main+0xa6>
 162:	00 c0       	rjmp	.+0      	; 0x164 <main+0xb0>
 164:	00 00       	nop
		_delay_ms(5200);
		Toggle_Bit(PORTC,2);
 166:	85 b3       	in	r24, 0x15	; 21
 168:	8d 27       	eor	r24, r29
 16a:	85 bb       	out	0x15, r24	; 21
 16c:	2f e1       	ldi	r18, 0x1F	; 31
 16e:	81 ea       	ldi	r24, 0xA1	; 161
 170:	97 e0       	ldi	r25, 0x07	; 7
 172:	21 50       	subi	r18, 0x01	; 1
 174:	80 40       	sbci	r24, 0x00	; 0
 176:	90 40       	sbci	r25, 0x00	; 0
 178:	e1 f7       	brne	.-8      	; 0x172 <main+0xbe>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <main+0xc8>
 17c:	00 00       	nop
		_delay_ms(2500);
		}
		/***********************/
		if(putton3_value())
 17e:	0e 94 4d 00 	call	0x9a	; 0x9a <putton3_value>
 182:	88 23       	and	r24, r24
 184:	29 f1       	breq	.+74     	; 0x1d0 <main+0x11c>
		{
			Toggle_Bit(PORTC,7);
 186:	85 b3       	in	r24, 0x15	; 21
 188:	80 58       	subi	r24, 0x80	; 128
 18a:	85 bb       	out	0x15, r24	; 21
 18c:	2f e5       	ldi	r18, 0x5F	; 95
 18e:	80 e9       	ldi	r24, 0x90	; 144
 190:	9f e0       	ldi	r25, 0x0F	; 15
 192:	21 50       	subi	r18, 0x01	; 1
 194:	80 40       	sbci	r24, 0x00	; 0
 196:	90 40       	sbci	r25, 0x00	; 0
 198:	e1 f7       	brne	.-8      	; 0x192 <main+0xde>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <main+0xe8>
 19c:	00 00       	nop
			_delay_ms(5100);
			Toggle_Bit(PORTC,2);
 19e:	85 b3       	in	r24, 0x15	; 21
 1a0:	8d 27       	eor	r24, r29
 1a2:	85 bb       	out	0x15, r24	; 21
 1a4:	2f e7       	ldi	r18, 0x7F	; 127
 1a6:	8e ed       	ldi	r24, 0xDE	; 222
 1a8:	9f e0       	ldi	r25, 0x0F	; 15
 1aa:	21 50       	subi	r18, 0x01	; 1
 1ac:	80 40       	sbci	r24, 0x00	; 0
 1ae:	90 40       	sbci	r25, 0x00	; 0
 1b0:	e1 f7       	brne	.-8      	; 0x1aa <main+0xf6>
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <main+0x100>
 1b4:	00 00       	nop
			_delay_ms(5200);
			Toggle_Bit(PORTD,3);
 1b6:	82 b3       	in	r24, 0x12	; 18
 1b8:	8c 27       	eor	r24, r28
 1ba:	82 bb       	out	0x12, r24	; 18
 1bc:	2f e1       	ldi	r18, 0x1F	; 31
 1be:	81 ea       	ldi	r24, 0xA1	; 161
 1c0:	97 e0       	ldi	r25, 0x07	; 7
 1c2:	21 50       	subi	r18, 0x01	; 1
 1c4:	80 40       	sbci	r24, 0x00	; 0
 1c6:	90 40       	sbci	r25, 0x00	; 0
 1c8:	e1 f7       	brne	.-8      	; 0x1c2 <main+0x10e>
 1ca:	00 c0       	rjmp	.+0      	; 0x1cc <main+0x118>
 1cc:	00 00       	nop
 1ce:	7e cf       	rjmp	.-260    	; 0xcc <main+0x18>
			_delay_ms(2500);
		}
		else
		{
			PORTC=0x00;
 1d0:	15 ba       	out	0x15, r1	; 21
			PORTD=0x00;
 1d2:	12 ba       	out	0x12, r1	; 18
 1d4:	7b cf       	rjmp	.-266    	; 0xcc <main+0x18>

000001d6 <_exit>:
 1d6:	f8 94       	cli

000001d8 <__stop_program>:
 1d8:	ff cf       	rjmp	.-2      	; 0x1d8 <__stop_program>
